package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"text/template"
)

type Meta struct {
	Name   string
	Type   string
	Random string
}

func main() {
	tmpl, err := template.ParseFiles("cmd/generate/gen_x_seq.go.tmpl")
	if err != nil {
		panic(err)
	}

	testTmpl, err := template.ParseFiles("cmd/generate/gen_x_seq_test.go.tmpl")
	if err != nil {
		panic(err)
	}

	metas := []Meta{
		{
			Name:   "Int64",
			Type:   "int64",
			Random: "rand.Int63()",
		},
		{
			Name:   "Uint64",
			Type:   "uint64",
			Random: "rand.Uint64()",
		},
		{
			Name:   "Float64",
			Type:   "float64",
			Random: "rand.Float64()",
		},
		{
			Name:   "Int",
			Type:   "int",
			Random: "rand.Int()",
		},
		// TODO more types
	}

	for _, v := range metas {
		generate(tmpl, testTmpl, v)
	}
}

func generate(tmpl, testTmpl *template.Template, meta Meta) {
	{
		output := &bytes.Buffer{}
		output.WriteString("// Code generated by cmd/generate. DO NOT EDIT.\n")
		if err := tmpl.Execute(output, meta); err != nil {
			panic(err)
		}

		src, err := format.Source(output.Bytes())
		if err != nil {
			panic(err)
		}

		if err := ioutil.WriteFile(fmt.Sprintf("gen_%s_seq.go", meta.Type), src, 0666); err != nil {
			panic(err)
		}
	}
	{
		output := &bytes.Buffer{}
		output.WriteString("// Code generated by cmd/generate. DO NOT EDIT.\n")
		if err := testTmpl.Execute(output, meta); err != nil {
			panic(err)
		}

		src, err := format.Source(output.Bytes())
		if err != nil {
			panic(err)
		}

		if err := ioutil.WriteFile(fmt.Sprintf("gen_%s_seq_test.go", meta.Type), src, 0666); err != nil {
			panic(err)
		}
	}
}
