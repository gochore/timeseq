package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"text/template"
)

type Meta struct {
	Name   string
	Type   string
	Random string
}

func main() {
	tmpl, err := template.ParseFiles("cmd/generate/gen_x_seq.go.tmpl")
	if err != nil {
		panic(err)
	}

	testTmpl, err := template.ParseFiles("cmd/generate/gen_x_seq_test.go.tmpl")
	if err != nil {
		panic(err)
	}

	metas := []Meta{
		{Name: "Uint8", Type: "uint8", Random: "uint8(rand.Uint32())"},
		{Name: "Uint16", Type: "uint16", Random: "uint16(rand.Uint32())"},
		{Name: "Uint32", Type: "uint32", Random: "rand.Uint32()"},
		{Name: "Uint64", Type: "uint64", Random: "rand.Uint64()"},

		{Name: "Int8", Type: "int8", Random: "int8(rand.Int31())"},
		{Name: "Int16", Type: "int16", Random: "int16(rand.Int31())"},
		{Name: "Int32", Type: "int32", Random: "rand.Int31()"},
		{Name: "Int64", Type: "int64", Random: "rand.Int63()"},

		{Name: "Float32", Type: "float32", Random: "rand.Float32()"},
		{Name: "Float64", Type: "float64", Random: "rand.Float64()"},

		{Name: "Int", Type: "int", Random: "rand.Int()"},
		{Name: "Uint", Type: "uint", Random: "uint(rand.Uint32())"},
	}

	for _, v := range metas {
		generate(tmpl, testTmpl, v)
	}
}

func generate(tmpl, testTmpl *template.Template, meta Meta) {
	{
		output := &bytes.Buffer{}
		output.WriteString("// Code generated by cmd/generate. DO NOT EDIT.\n\n")
		if err := tmpl.Execute(output, meta); err != nil {
			panic(err)
		}

		src, err := format.Source(output.Bytes())
		if err != nil {
			panic(err)
		}

		if err := ioutil.WriteFile(fmt.Sprintf("gen_%s_seq.go", meta.Type), src, 0666); err != nil {
			panic(err)
		}
	}
	{
		output := &bytes.Buffer{}
		output.WriteString("// Code generated by cmd/generate. DO NOT EDIT.\n\n")
		if err := testTmpl.Execute(output, meta); err != nil {
			panic(err)
		}

		src, err := format.Source(output.Bytes())
		if err != nil {
			panic(err)
		}

		if err := ioutil.WriteFile(fmt.Sprintf("gen_%s_seq_test.go", meta.Type), src, 0666); err != nil {
			panic(err)
		}
	}
}
