// Code generated by cmd/generate. DO NOT EDIT.

package timeseq

import (
	"errors"
	"sort"
	"sync"
	"time"
)

// {{.Name}} is a time point with {{.Type}} value inside
type {{.Name}} struct {
	Time  time.Time
	Value {{.Type}}
}

// IsZero returns if time and value are both zero
func (v {{.Name}}) IsZero() bool {
	return v.Value == 0 && v.Time.IsZero()
}

// Equal returns if time and value are both equal
func (v {{.Name}}) Equal(n {{.Name}}) bool {
	return v.Value == n.Value && v.Time.Equal(n.Time)
}

// {{.Name}}s is a alias of {{.Name}} slice
type {{.Name}}s []{{.Name}}

// Len implements Interface.Len()
func (s {{.Name}}s) Len() int {
	return len(s)
}

// Swap implements Interface.Swap()
func (s {{.Name}}s) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}

// Time implements Interface.Time()
func (s {{.Name}}s) Time(i int) time.Time {
	return s[i].Time
}

// Slice implements Interface.Slice()
func (s {{.Name}}s) Slice(i, j int) Interface {
	return s[i:j]
}

// {{.Name}}Seq is a wrapper with useful methods of {{.Name}} slice
type {{.Name}}Seq struct {
	slice {{.Name}}s

	indexOnce  sync.Once
	timeIndex  map[timeKey][]int
	valueIndex map[{{.Type}}][]int
	valueSlice []int
}

// New{{.Name}}Seq returns *{{.Name}}Seq with copied slice inside
func New{{.Name}}Seq(slice {{.Name}}s) *{{.Name}}Seq {
	temp := make({{.Name}}s, len(slice))
	copy(temp, slice)
	return Wrap{{.Name}}Seq(temp)
}

// Wrap{{.Name}}Seq returns *{{.Name}}Seq with origin slice inside
func Wrap{{.Name}}Seq(slice {{.Name}}s) *{{.Name}}Seq {
	if !IsSorted(slice) {
		Sort(slice)
	}
	return new{{.Name}}Seq(slice)
}

func new{{.Name}}Seq(slice {{.Name}}s) *{{.Name}}Seq {
	ret := &{{.Name}}Seq{
		slice: slice,
	}
	return ret
}

func (s *{{.Name}}Seq) buildIndex() {
	s.indexOnce.Do(func() {
		timeIndex := make(map[timeKey][]int, len(s.slice))
		valueIndex := make(map[{{.Type}}][]int, len(s.slice))
		valueSlice := s.valueSlice[:0]
		for i, v := range s.slice {
			k := newTimeKey(v.Time)
			timeIndex[k] = append(timeIndex[k], i)
			valueIndex[v.Value] = append(valueIndex[v.Value], i)
			valueSlice = append(valueSlice, i)
		}
		sort.SliceStable(valueSlice, func(i, j int) bool {
			return s.slice[valueSlice[i]].Value < s.slice[valueSlice[j]].Value
		})
		s.timeIndex = timeIndex
		s.valueIndex = valueIndex
		s.valueSlice = valueSlice
	})
}

func (s *{{.Name}}Seq) resetIndex() {
	s.indexOnce = sync.Once{}
}

// {{.Name}}s returns a replica of inside slice
func (s *{{.Name}}Seq) {{.Name}}s() {{.Name}}s {
	slice := make({{.Name}}s, len(s.slice))
	copy(slice, s.slice)
	return slice
}

// Len returns length of inside slice
func (s *{{.Name}}Seq) Len() int {
	return len(s.slice)
}

// Index returns element of inside slice, returns zero if index is out of range
func (s *{{.Name}}Seq) Index(i int) {{.Name}} {
	if i < 0 || i >= len(s.slice) {
		return {{.Name}}{}
	}
	return s.slice[i]
}

// Time returns the first element with time t, returns zero if not found
func (s *{{.Name}}Seq) Time(t time.Time) {{.Name}} {
	got := s.MTime(t)
	if len(got) == 0 {
		return {{.Name}}{}
	}
	return got[0]
}

// MTime returns all elements with time t, returns nil if not found
func (s *{{.Name}}Seq) MTime(t time.Time) {{.Name}}s {
	s.buildIndex()
	index := s.timeIndex[newTimeKey(t)]
	if len(index) == 0 {
		return nil
	}
	ret := make({{.Name}}s, len(index))
	for i, v := range index {
		ret[i] = s.slice[v]
	}
	return ret
}

// Value returns the first element with value v, returns zero if not found
func (s *{{.Name}}Seq) Value(v {{.Type}}) {{.Name}} {
	got := s.MValue(v)
	if len(got) == 0 {
		return {{.Name}}{}
	}
	return got[0]
}

// MValue returns all elements with value v, returns nil if not found
func (s *{{.Name}}Seq) MValue(v {{.Type}}) {{.Name}}s {
	s.buildIndex()
	index := s.valueIndex[v]
	if len(index) == 0 {
		return nil
	}
	ret := make({{.Name}}s, len(index))
	for i, v := range index {
		ret[i] = s.slice[v]
	}
	return ret
}

// Traverse call fn for every element one by one, break if fn returns true
func (s *{{.Name}}Seq) Traverse(fn func(i int, v {{.Name}}) (stop bool)) {
	for i, v := range s.slice {
		if fn != nil && fn(i, v) {
			break
		}
	}
}

// Sum returns sum of all values
func (s *{{.Name}}Seq) Sum() {{.Type}} {
	var ret {{.Type}}
	for _, v := range s.slice {
		ret += v.Value
	}
	return ret
}

// Max returns the element with max value, returns zero if empty
func (s *{{.Name}}Seq) Max() {{.Name}} {
	var max {{.Name}}
	found := false
	for _, v := range s.slice {
		if !found {
			max = v
			found = true
		} else if v.Value > max.Value {
			max = v
		}
	}
	return max
}

// Min returns the element with min value, returns zero if empty
func (s *{{.Name}}Seq) Min() {{.Name}} {
	var min {{.Name}}
	found := false
	for _, v := range s.slice {
		if !found {
			min = v
			found = true
		} else if v.Value < min.Value {
			min = v
		}
	}
	return min
}

// First returns the first element, returns zero if empty
func (s *{{.Name}}Seq) First() {{.Name}} {
	if len(s.slice) == 0 {
		return {{.Name}}{}
	}
	return s.slice[0]
}

// Last returns the last element, returns zero if empty
func (s *{{.Name}}Seq) Last() {{.Name}} {
	if len(s.slice) == 0 {
		return {{.Name}}{}
	}
	return s.slice[len(s.slice)-1]
}

// Percentile returns the element matched with percentile pct, returns zero if empty,
// the pct's valid range is be [0, 1], it will be treated as 1 if greater than 1, as 0 if smaller than 0
func (s *{{.Name}}Seq) Percentile(pct float64) {{.Name}} {
	s.buildIndex()
	if len(s.slice) == 0 {
		return {{.Name}}{}
	}
	if pct > 1 {
		pct = 1
	}
	if pct < 0 {
		pct = 0
	}
	i := int(float64(len(s.slice))*pct - 1)
	if i < 0 {
		i = 0
	}
	return s.slice[s.valueSlice[i]]
}

// Range returns a sub *{{.Name}}Seq with specified interval
func (s *{{.Name}}Seq) Range(interval Interval) *{{.Name}}Seq {
	slice := Range(s.slice, interval).({{.Name}}s)
	return new{{.Name}}Seq(slice)
}

// Range returns a *{{.Name}}Seq without elements which make fn returns true
func (s *{{.Name}}Seq) Trim(fn func(i int, v {{.Name}}) bool) *{{.Name}}Seq {
	if fn == nil || len(s.slice) == 0 {
		return s
	}

	removeM := map[int]struct{}{}
	for i, v := range s.slice {
		if fn(i, v) {
			removeM[i] = struct{}{}
		}
	}
	if len(removeM) == 0 {
		return s
	}

	slice := make({{.Name}}s, 0, len(s.slice)-len(removeM))
	for i, v := range s.slice {
		if _, ok := removeM[i]; ok {
			continue
		}
		slice = append(slice, v)
	}

	return new{{.Name}}Seq(slice)
}

// Merge returns a new *{{.Name}}Seq with merged data according to the specified rule
func (s *{{.Name}}Seq) Merge(fn func(t time.Time, v1, v2 *{{.Type}}) *{{.Type}}, slices ...{{.Name}}s) error {
	if fn == nil {
		return errors.New("nil fn")
	}

	if len(slices) == 0 {
		return nil
	}

	slice1 := s.slice
	for _, slice2 := range slices {
		if !IsSorted(slice2) {
			temp := make({{.Name}}s, len(slice2))
			copy(temp, slice2)
			Sort(temp)
			slice2 = temp
		}
		var got {{.Name}}s
		for i1, i2 := 0, 0; i1 < len(slice1) || i2 < len(slice2); {
			var (
				t time.Time
				v *{{.Type}}
			)
			switch {
			case i1 == len(slice1):
				t = slice2[i2].Time
				v2 := slice2[i2].Value
				v = fn(t, nil, &v2)
				i2++
			case i2 == len(slice2):
				t = slice1[i1].Time
				v1 := slice1[i1].Value
				v = fn(t, &v1, nil)
				i1++
			case slice1[i1].Time.Equal(slice2[i2].Time):
				t = slice1[i1].Time
				v1 := slice1[i1].Value
				v2 := slice2[i2].Value
				v = fn(t, &v1, &v2)
				i1++
				i2++
			case slice1[i1].Time.Before(slice2[i2].Time):
				t = slice1[i1].Time
				v1 := slice1[i1].Value
				v = fn(t, &v1, nil)
				i1++
			case slice1[i1].Time.After(slice2[i2].Time):
				t = slice2[i2].Time
				v2 := slice2[i2].Value
				v = fn(t, nil, &v2)
				i2++
			}
			if v != nil {
				got = append(got, {{.Name}}{
					Time:  t,
					Value: *v,
				})
			}
		}
		slice1 = got
	}

	s.slice = slice1
	s.resetIndex()
	return nil
}

// Aggregate returns a aggregated *{{.Name}}Seq according to the specified rule
func (s *{{.Name}}Seq) Aggregate(fn func(t time.Time, slice {{.Name}}s) *{{.Type}}, duration time.Duration, interval Interval) *{{.Name}}Seq {
	if fn == nil {
		return s
	}

	slice := {{.Name}}s{}
	temp := {{.Name}}s{}

	if duration <= 0 {
		for i := 0; i < s.Len(); {
			t := s.slice[i].Time
			if !interval.Contain(t) {
				i++
				continue
			}
			temp = temp[:0]
			for i < s.slice.Len() && t.Equal(s.slice[i].Time) {
				temp = append(temp, s.slice[i])
				i++
			}
			v := fn(t, temp)
			if v != nil {
				slice = append(slice, {{.Name}}{
					Time:  t,
					Value: *v,
				})
			}
		}
	} else {
		var begin time.Time
		if len(s.slice) > 0 {
			begin = s.slice[0].Time.Truncate(duration)
		}
		if interval.NotBefore != nil {
			begin = (*interval.NotBefore).Truncate(duration)
			if begin.Before(*interval.NotBefore) {
				begin = begin.Add(duration)
			}
		}
		for t, i := begin, 0; interval.Contain(t); t = t.Add(duration) {
			temp = temp[:0]
			itv := BeginAt(t).EndAt(t.Add(duration))
			for i < len(s.slice) {
				if s.slice[i].Time.After(*itv.NotAfter) {
					break
				}
				if itv.Contain(s.slice[i].Time) {
					temp = append(temp, s.slice[i])
				}
				i++
			}
			v := fn(t, temp)
			if v != nil {
				slice = append(slice, {{.Name}}{
					Time:  t,
					Value: *v,
				})
			}
		}
	}

	return new{{.Name}}Seq(slice)
}
